#!/usr/bin/env python
# -*- coding: utf-8 -*-
#Client
import socket
import time


HOST =       '127.0.0.1' #loopback
SERVER_PORT = 11138
MAX_LINE    = 256


# Written by Royal
# Client

# translate the server name or IP address (128.90.54.1) to resolved IP address
# If the user input is an alpha name for the host, use gethostbyname()
# If not, get host by addr (assume IPv4)
# ^ wonder where these 3 comments came from?
# Create a socket.
# Connect to a server.
# Send and receive data.
# closesocket(s); TODO: do it the hard way?

# ^NU_ new user
# ^LI_ log in
# ^LO_ log out
# ^MS_ message
def login(user, pasw):
    #try:
    clientsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    clientsocket.connect((HOST, SERVER_PORT))
    # 
    command = "^LI_" + user + "^PW_" + pasw
    clientsocket.sendall(bytes(command, 'utf-8'))
    while(True):
        reply = clientsocket.recv(MAX_LINE)
        print(reply)

        if not reply:
            print('.')
            time.sleep(1) #sleep for 1 second
            # TODO recursive check if not data, lost cennection to the server?
            # print something like "Trying to reconnect... in %d (sec)"
            pass
        else:
            print(reply)
            # probably prepend with the command: login, newuser, message, logout
            answer = input()


            clientsocket.sendall(answer.encode())
    print("Closing socket...")
    clientsocket.close()
    print("Socket closed.")

    return True # if can connect

def main():
    print("Client is starting")
    while(True):
        select = input("Do you want to create a New User (N/n), or Log in (L/l)?: ")
        # if New User
        if (select == 'N') or (select == 'n'):
            user = input("Please enter a username between 3 and 32 characters: ")
            # The length of the UserID should be between 3 and 32 characters, 
            if (len(user) < 3 or len(user) > 32):
                print("The Username must be between 3 and 32 characters.")
                continue
            pasw = input("Please enter a password between 4 and 8 characters: ")
            # The length of the UserID should be between 3 and 32 characters, 
            if (len(pasw) < 4 or len(pasw) > 8):
                print("The Username must be between 3 and 32 characters.")
                continue
            command = "^NU_" # to prepend
            print("Invoked ", command)

        # logging in
        if (select == 'L') or (select == 'l'):
            user = input("Username: ")
            # The length of the UserID should be between 3 and 32 characters, 
            pasw = input("Password: ")

            if (login(user, pasw)):
                # can only call the message function if logged in.
                print("login returned true")
                break
            else:
                print("login did not return true")
                break
            # send to server and check, see if log in. 
            # if logged in, call the logged in function. (to prevent automatic anon logins)
            # if not able to log in, try the loop again

        elif (select == 'Q') or (select == 'q'):
            # quit
            return  
        
        else:
            print("Unrecognized command. Try again, or use (Q/q) to quit.")
            continue



#     # if Login:
#     #try:
#     clientsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#     clientsocket.connect((HOST, SERVER_PORT))
#     while True:
#         #clientsocket.sendall(b'Test')
#         data = clientsocket.recv(MAX_LINE)
#         print(data)

#         if not data:
#             print('.')
#             time.sleep(1) #sleep for 1 second
#             # TODO recursive check if not data, lost cennection to the server?
#             # print something like "Trying to reconnect... in %d (sec)"
#             pass
#         else:
#             print(data)
#             # probably prepend with the command: login, newuser, message, logout
#             answer = input()
#             if answer == 'q!':
#                 break

#             clientsocket.sendall(answer.encode())
#     print("Closing socket...")
#     clientsocket.close()
#     print("Socket closed.")
#     return 0
# '''
#         # # [WinError 10053] An established connection was aborted by the software in your host machine
#         # except:
#         #     print('something went wrong')
#         #     # TODO: better error handling
# '''


if __name__ == "__main__":
    main()
